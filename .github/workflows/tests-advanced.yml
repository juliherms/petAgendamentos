name: CI - Advanced Maven Tests (Java 21)

on:
  push:
    branches: [ "master" ]
    paths:
      - "pom.xml"
      - "src/**"
      - ".github/workflows/**"
  pull_request:
    branches: [ "master" ]
    paths:
      - "pom.xml"
      - "src/**"

permissions:
  contents: read

concurrency:
  group: ci-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        java: ['21']

    env:
      MAVEN_OPTS: "-XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xmx2g -Dstyle.color=always"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java ${{ matrix.java }} (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
          cache: maven

      - name: Make Maven Wrapper executable
        run: chmod +x ./mvnw

      - name: Show Java & Maven versions
        run: |
          java -version
          if [ -f ./mvnw ]; then ./mvnw -v; else mvn -v; fi

      - name: Start MySQL with Docker Compose
        run: |
          # Verifica se Docker está disponível
          docker --version
          docker compose version
          
          # Inicia MySQL
          docker compose up -d mysql
          
          # Aguarda MySQL estar pronto (usando root primeiro)
          echo "Waiting for MySQL to be ready..."
          timeout 120 bash -c 'until docker exec pets-mysql mysqladmin ping -h"localhost" -u"root" -p"root" --silent; do sleep 3; echo "Waiting..."; done'
          
          # Aguarda um pouco mais para garantir que o usuário pets_user foi criado
          sleep 10
          
          # Verifica se o usuário pets_user existe e pode conectar
          echo "Verifying pets_user connection..."
          timeout 30 bash -c 'until docker exec pets-mysql mysql -u pets_user -ppets_pass -e "SELECT 1;" --silent; do sleep 2; echo "Waiting for pets_user..."; done'
          
          echo "MySQL is ready!"

      - name: Show MySQL status
        run: |
          docker compose ps
          echo "Testing connection with pets_user..."
          docker exec pets-mysql mysql -u pets_user -ppets_pass -e "SHOW DATABASES;"
          echo "Connection successful!"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run unit tests only
        run: |
          if [ -f ./mvnw ]; then MVN=./mvnw; else MVN=mvn; fi
          $MVN -B -ntp -U clean test -Dspring.profiles.active=test-mysql

      - name: Upload Surefire reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports-${{ matrix.java }}
          path: |
            **/target/surefire-reports/**
          if-no-files-found: ignore

  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    if: github.ref == 'refs/heads/master' || github.event_name == 'pull_request'
    strategy:
      matrix:
        java: ['21']

    env:
      MAVEN_OPTS: "-XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xmx2g -Dstyle.color=always"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java ${{ matrix.java }} (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
          cache: maven

      - name: Make Maven Wrapper executable
        run: chmod +x ./mvnw

      - name: Start MySQL with Docker Compose
        run: |
          # Verifica se Docker está disponível
          docker --version
          docker compose version
          
          # Inicia MySQL
          docker compose up -d mysql
          
          # Aguarda MySQL estar pronto (usando root primeiro)
          echo "Waiting for MySQL to be ready..."
          timeout 120 bash -c 'until docker exec pets-mysql mysqladmin ping -h"localhost" -u"root" -p"root" --silent; do sleep 3; echo "Waiting..."; done'
          
          # Aguarda um pouco mais para garantir que o usuário pets_user foi criado
          sleep 10
          
          # Verifica se o usuário pets_user existe e pode conectar
          echo "Verifying pets_user connection..."
          timeout 30 bash -c 'until docker exec pets-mysql mysql -u pets_user -ppets_pass -e "SELECT 1;" --silent; do sleep 2; echo "Waiting for pets_user..."; done'
          
          echo "MySQL is ready!"

      - name: Show MySQL status
        run: |
          docker compose ps
          echo "Testing connection with pets_user..."
          docker exec pets-mysql mysql -u pets_user -ppets_pass -e "SHOW DATABASES;"
          echo "Connection successful!"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run integration tests
        run: |
          if [ -f ./mvnw ]; then MVN=./mvnw; else MVN=mvn; fi
          $MVN -B -ntp -U verify -DskipTests -Dspring.profiles.active=test-mysql

      - name: Upload Failsafe reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: failsafe-reports-${{ matrix.java }}
          path: |
            **/target/failsafe-reports/**
          if-no-files-found: ignore

  code-coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests, integration-tests]
    if: always() && (github.ref == 'refs/heads/master' || github.event_name == 'pull_request')
    strategy:
      matrix:
        java: ['21']

    env:
      MAVEN_OPTS: "-XX:+TieredCompilation -XX:TieredStopAtLevel=1 -Xmx2g -Dstyle.color=always"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java ${{ matrix.java }} (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
          cache: maven

      - name: Make Maven Wrapper executable
        run: chmod +x ./mvnw

      - name: Start MySQL with Docker Compose
        run: |
          # Verifica se Docker está disponível
          docker --version
          docker compose version
          
          # Inicia MySQL
          docker compose up -d mysql
          
          # Aguarda MySQL estar pronto (usando root primeiro)
          echo "Waiting for MySQL to be ready..."
          timeout 120 bash -c 'until docker exec pets-mysql mysqladmin ping -h"localhost" -u"root" -p"root" --silent; do sleep 3; echo "Waiting..."; done'
          
          # Aguarda um pouco mais para garantir que o usuário pets_user foi criado
          sleep 10
          
          # Verifica se o usuário pets_user existe e pode conectar
          echo "Verifying pets_user connection..."
          timeout 30 bash -c 'until docker exec pets-mysql mysql -u pets_user -ppets_pass -e "SELECT 1;" --silent; do sleep 2; echo "Waiting for pets_user..."; done'
          
          echo "MySQL is ready!"

      - name: Show MySQL status
        run: |
          docker compose ps
          echo "Testing connection with pets_user..."
          docker exec pets-mysql mysql -u pets_user -ppets_pass -e "SHOW DATABASES;"
          echo "Connection successful!"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Generate coverage report
        run: |
          if [ -f ./mvnw ]; then MVN=./mvnw; else MVN=mvn; fi
          # Executa testes e gera relatório de cobertura
          $MVN -B -ntp -U clean test -Dspring.profiles.active=test-mysql
          
          # Verifica se o relatório foi gerado
          if [ -f "target/site/jacoco/index.html" ]; then
            echo "✅ Relatório de cobertura gerado com sucesso!"
            ls -la target/site/jacoco/
          else
            echo "❌ Relatório de cobertura não foi gerado"
            find target/ -name "*.html" 2>/dev/null || echo "Nenhum arquivo HTML encontrado"
          fi

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.java }}
          path: |
            **/target/site/jacoco/**
          if-no-files-found: ignore

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Try to find coverage report
            const coveragePath = 'target/site/jacoco/index.html';
            if (fs.existsSync(coveragePath)) {
              const coverage = fs.readFileSync(coveragePath, 'utf8');
              const match = coverage.match(/Total\s+(\d+\.?\d*)%/);
              if (match) {
                const percentage = match[1];
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `📊 **Cobertura de Código**: ${percentage}%`
                });
              }
            }
